{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onChange","toggleMode","htmlFor","TextForm","wordCounter","line","arr","split","count","forEach","element","useState","text","setText","style","color","heading","rows","value","backgroundColor","event","target","onClick","newtext","showAlert","substring","substr","length","document","getElementById","select","navigator","clipboard","writeText","newText","join","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bf4ae12e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onChange={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n  mode: PropTypes.string,\r\n};\r\nNavbar.defaultProps = { title: \"Set title here\", aboutText: \"About us\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const wordCounter = (line) => {\r\n    let arr = line.split(\" \");\r\n    let count = 0;\r\n    arr.forEach((element) => {\r\n      if (element) count++;\r\n    });\r\n    return count;\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n    props.showAlert(\"Text Cleared !\", \"success\");\r\n  };\r\n\r\n  const handleCapClick = () => {\r\n    let newtext = \"\";\r\n    let arr = text.toLowerCase().split(\" \");\r\n    arr.forEach((element) => {\r\n      newtext += element.charAt(0).toUpperCase() + element.substring(1) + \" \";\r\n    });\r\n    setText(newtext.substr(0, newtext.length - 1));\r\n    props.showAlert(\"Converted to Capitalized!\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed!\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"new text\"; // wrong way to set the text\r\n  // setText(\"new text\"); // correct wat to set the text\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#181549\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary me-2\" onClick={handleUpClick}>\r\n          Convert To Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>\r\n          Convert To Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCapClick}>\r\n          Convert To Capitalize\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>\r\n          Copy to Clipboard\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n          Remoce Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h2>Your Text summary</h2>\r\n        <p>\r\n          {wordCounter(text)} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * wordCounter(text)} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter Something into text box above to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#181549\";\n      showAlert(\"Dark Mode Has Been Enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils is Amazing Mode\";\n      // }, 2000);\n      // setTimeout(() => {\n      //   setInterval(() => {\n      //     document.title = \"Install TextUtils Now!\";\n      //   }, 2000);\n      // }, 1000);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode Has Been Enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      {/*<Router>*/}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n        {/*\n          Why Use of exact\n          /user ---> component1\n          /user/home ---> component2 \n          */}\n        {/* <Route exact path=\"/about\"> */}\n        {/* <About /> */}\n        {/* </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter The Text to analyze below\"\n          mode={mode}\n        />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}